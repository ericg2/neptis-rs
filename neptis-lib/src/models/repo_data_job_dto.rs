/*
 * Neptis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepoDataJobDto {
    #[serde(rename = "jobId", skip_serializing_if = "Option::is_none")]
    pub job_id: Option<uuid::Uuid>,
    #[serde(rename = "dataPoint", skip_serializing_if = "Option::is_none")]
    pub data_point: Option<Box<models::DataPointDto>>,
    #[serde(rename = "repoPoint", skip_serializing_if = "Option::is_none")]
    pub repo_point: Option<Box<models::RepoPointDto>>,
    #[serde(rename = "createDate", skip_serializing_if = "Option::is_none")]
    pub create_date: Option<String>,
    #[serde(
        rename = "startDate",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub start_date: Option<Option<String>>,
    #[serde(
        rename = "endDate",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub end_date: Option<Option<String>>,
    #[serde(
        rename = "jobType",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub job_type: Option<Option<String>>,
    #[serde(
        rename = "startedBy",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub started_by: Option<Option<String>>,
    #[serde(rename = "isRunning", skip_serializing_if = "Option::is_none")]
    pub is_running: Option<bool>,
    #[serde(
        rename = "fromPath",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub from_path: Option<Option<String>>,
    #[serde(
        rename = "toPath",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub to_path: Option<Option<String>>,
    #[serde(rename = "summary", skip_serializing_if = "Option::is_none")]
    pub summary: Option<Box<models::RepoDataJobSummaryDto>>,
    #[serde(rename = "lastStatus", skip_serializing_if = "Option::is_none")]
    pub last_status: Option<Box<models::RepoDataJobStatusDto>>,
    #[serde(
        rename = "restoreSnapshotId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub restore_snapshot_id: Option<Option<String>>,
    #[serde(
        rename = "errors",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub errors: Option<Option<Vec<models::JobErrorDto>>>,
}

impl RepoDataJobDto {
    pub fn new() -> RepoDataJobDto {
        RepoDataJobDto {
            job_id: None,
            data_point: None,
            repo_point: None,
            create_date: None,
            start_date: None,
            end_date: None,
            job_type: None,
            started_by: None,
            is_running: None,
            from_path: None,
            to_path: None,
            summary: None,
            last_status: None,
            restore_snapshot_id: None,
            errors: None,
        }
    }
}
