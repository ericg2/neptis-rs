/*
 * Neptis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{Error, configuration};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize};
use serde_json::Value;
use crate::apis::configuration::ApiBuilder;

/// struct for typed errors of method [`api_repos_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiReposGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_repos_point_user_point_name_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiReposPointUserPointNameDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_repos_point_user_point_name_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiReposPointUserPointNameGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_repos_point_user_point_name_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiReposPointUserPointNamePutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_repos_point_user_point_name_shares_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiReposPointUserPointNameSharesDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_repos_point_user_point_name_shares_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiReposPointUserPointNameSharesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_repos_point_user_point_name_shares_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiReposPointUserPointNameSharesPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_repos_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiReposPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`browse_files_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BrowseFilesForRepoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_one_snapshot_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteOneSnapshotForRepoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dump_file_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DumpFileForRepoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_all_jobs_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllJobsForRepoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_all_snapshots_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllSnapshotsForRepoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_one_snapshot_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOneSnapshotForRepoError {
    UnknownValue(serde_json::Value),
}

pub async fn api_repos_get(
    configuration: &configuration::Configuration,
) -> Result<Vec<models::RepoPointDto>, Error<ApiReposGetError>> {
    let uri_str = format!("{}/api/repos", configuration.base_path);
    ApiBuilder::new(configuration, reqwest::Method::GET, &uri_str)
        .execute()
        .await
}

pub async fn api_repos_point_user_point_name_delete(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
) -> Result<bool, Error<ApiReposPointUserPointNameDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_point_user = point_user;
    let p_point_name = point_name;

    let uri_str = format!(
        "{}/api/repos/{pointUser}/{pointName}",
        configuration.base_path,
        pointUser = crate::apis::urlencode(p_point_user),
        pointName = crate::apis::urlencode(p_point_name)
    );
    ApiBuilder::new(configuration, reqwest::Method::DELETE, &uri_str)
        .execute()
        .await
}

pub async fn api_repos_point_user_point_name_get(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
) -> Result<models::RepoPointDto, Error<ApiReposPointUserPointNameGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_point_user = point_user;
    let p_point_name = point_name;

    let uri_str = format!(
        "{}/api/repos/{pointUser}/{pointName}",
        configuration.base_path,
        pointUser = crate::apis::urlencode(p_point_user),
        pointName = crate::apis::urlencode(p_point_name)
    );
    ApiBuilder::new(configuration, reqwest::Method::GET, &uri_str)
        .execute()
        .await
}

pub async fn api_repos_point_user_point_name_put(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
    max_bytes: Option<i64>,
) -> Result<models::RepoPointDto, Error<ApiReposPointUserPointNamePutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_point_user = point_user;
    let p_point_name = point_name;
    let p_max_bytes = max_bytes;

    let uri_str = format!(
        "{}/api/repos/{pointUser}/{pointName}",
        configuration.base_path,
        pointUser = crate::apis::urlencode(p_point_user),
        pointName = crate::apis::urlencode(p_point_name)
    );
    ApiBuilder::new(configuration, reqwest::Method::PUT, &uri_str)
        .with_opt_query("maxBytes", p_max_bytes)?
        .execute()
        .await
}

pub async fn api_repos_point_user_point_name_shares_delete(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
    user: Option<&str>,
) -> Result<bool, Error<ApiReposPointUserPointNameSharesDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_point_user = point_user;
    let p_point_name = point_name;
    let p_user = user;

    let uri_str = format!(
        "{}/api/repos/{pointUser}/{pointName}/shares",
        configuration.base_path,
        pointUser = crate::apis::urlencode(p_point_user),
        pointName = crate::apis::urlencode(p_point_name)
    );
    ApiBuilder::new(configuration, reqwest::Method::DELETE, &uri_str)
        .with_opt_query("user", p_user)?
        .execute()
        .await
}

pub async fn api_repos_point_user_point_name_shares_get(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
    user: Option<&str>,
) -> Result<Vec<models::RepoPointShareDto>, Error<ApiReposPointUserPointNameSharesGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_point_user = point_user;
    let p_point_name = point_name;
    let p_user = user;

    let uri_str = format!(
        "{}/api/repos/{pointUser}/{pointName}/shares",
        configuration.base_path,
        pointUser = crate::apis::urlencode(p_point_user),
        pointName = crate::apis::urlencode(p_point_name)
    );
    ApiBuilder::new(configuration, reqwest::Method::GET, &uri_str)
        .with_opt_query("user", p_user)?
        .execute()
        .await
}

pub async fn api_repos_point_user_point_name_shares_put(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
    repo_point_share_dto: Option<models::RepoPointShareDto>,
) -> Result<models::RepoPointShareDto, Error<ApiReposPointUserPointNameSharesPutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_point_user = point_user;
    let p_point_name = point_name;
    let p_repo_point_share_dto = repo_point_share_dto;

    let uri_str = format!(
        "{}/api/repos/{pointUser}/{pointName}/shares",
        configuration.base_path,
        pointUser = crate::apis::urlencode(p_point_user),
        pointName = crate::apis::urlencode(p_point_name)
    );
    ApiBuilder::new(configuration, reqwest::Method::PUT, &uri_str)
        .with_body(p_repo_point_share_dto)
        .execute()
        .await
}

pub async fn api_repos_post(
    configuration: &configuration::Configuration,
    name: Option<&str>,
    max_bytes: Option<i64>,
) -> Result<models::RepoPointDto, Error<ApiReposPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_name = name;
    let p_max_bytes = max_bytes;

    let uri_str = format!("{}/api/repos", configuration.base_path);
    ApiBuilder::new(&configuration, reqwest::Method::POST, &uri_str)
        .with_opt_query("name", p_name)?
        .with_opt_query("maxBytes", p_max_bytes)?
        .execute()
        .await
}

pub async fn browse_files_for_repo(
    configuration: &configuration::Configuration,
    data_point_browse_get_dto: Option<models::DataPointBrowseGetDto>,
) -> Result<Vec<models::FileDto>, Error<BrowseFilesForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_data_point_browse_get_dto = data_point_browse_get_dto;

    let uri_str = format!("{}/api/repos/files", configuration.base_path);
    ApiBuilder::new(&configuration, reqwest::Method::GET, &uri_str)
        .with_body(p_data_point_browse_get_dto)
        .execute()
        .await
}

pub async fn delete_one_snapshot_for_repo(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
    id: &str,
) -> Result<bool, Error<DeleteOneSnapshotForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_point_user = point_user;
    let p_point_name = point_name;
    let p_id = id;

    let uri_str = format!(
        "{}/api/repos/{pointUser}/{pointName}/snapshots/{id}",
        configuration.base_path,
        pointUser = crate::apis::urlencode(p_point_user),
        pointName = crate::apis::urlencode(p_point_name),
        id = crate::apis::urlencode(p_id)
    );
    ApiBuilder::new(&configuration, reqwest::Method::DELETE, &uri_str)
        .execute()
        .await
}

pub async fn dump_file_for_repo(
    configuration: &configuration::Configuration,
    body: Option<&str>,
) -> Result<models::FileOutputDto, Error<DumpFileForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/api/repos/dump", configuration.base_path);
    ApiBuilder::new(&configuration, reqwest::Method::GET, &uri_str)
        .with_body(p_body)
        .execute()
        .await
}

pub async fn get_all_jobs_for_repo(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
) -> Result<Vec<models::RepoDataJobDto>, Error<GetAllJobsForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_point_user = point_user;
    let p_point_name = point_name;

    let uri_str = format!(
        "{}/api/repos/{pointUser}/{pointName}/jobs",
        configuration.base_path,
        pointUser = crate::apis::urlencode(p_point_user),
        pointName = crate::apis::urlencode(p_point_name)
    );
    ApiBuilder::new(&configuration, reqwest::Method::GET, &uri_str)
        .execute()
        .await
}

pub async fn get_all_snapshots_for_repo(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
) -> Result<Vec<models::SnapshotDto>, Error<GetAllSnapshotsForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_point_user = point_user;
    let p_point_name = point_name;

    let uri_str = format!(
        "{}/api/repos/{pointUser}/{pointName}/snapshots",
        configuration.base_path,
        pointUser = crate::apis::urlencode(p_point_user),
        pointName = crate::apis::urlencode(p_point_name)
    );
    ApiBuilder::new(&configuration, reqwest::Method::GET, &uri_str)
        .execute()
        .await
}

pub async fn get_one_snapshot_for_repo(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
    id: &str,
) -> Result<models::SnapshotDto, Error<GetOneSnapshotForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_point_user = point_user;
    let p_point_name = point_name;
    let p_id = id;

    let uri_str = format!(
        "{}/api/repos/{pointUser}/{pointName}/snapshots/{id}",
        configuration.base_path,
        pointUser = crate::apis::urlencode(p_point_user),
        pointName = crate::apis::urlencode(p_point_name),
        id = crate::apis::urlencode(p_id)
    );
    ApiBuilder::new(&configuration, reqwest::Method::GET, &uri_str)
        .execute()
        .await
}
