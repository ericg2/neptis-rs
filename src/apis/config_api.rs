/*
 * Neptis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`get_global_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetGlobalConfigError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_global_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateGlobalConfigError {
    UnknownValue(serde_json::Value),
}


pub async fn get_global_config(configuration: &configuration::Configuration) -> Result<models::DynamicConfigDto, Error<GetGlobalConfigError>> {
    let uri_str = format!("{}/api/configs", configuration.base_path);
    configuration.execute(reqwest::Method::GET, &uri_str, None).await
}

pub async fn update_global_config(configuration: &configuration::Configuration, global_config_put_dto: Option<models::GlobalConfigPutDto>) -> Result<models::DynamicConfigDto, Error<UpdateGlobalConfigError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_global_config_put_dto = global_config_put_dto;

    let uri_str = format!("{}/api/configs", configuration.base_path);
    configuration.executet(reqwest::Method::PUT, &uri_str, p_global_config_put_dto).await
}

