/*
 * Neptis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{Error, configuration};
use crate::apis::configuration::ApiBuilder;
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize};
use serde_json::Value;

/// struct for typed errors of method [`api_datas_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiDatasGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_datas_point_user_point_name_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiDatasPointUserPointNameDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_datas_point_user_point_name_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiDatasPointUserPointNameGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_datas_point_user_point_name_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiDatasPointUserPointNamePutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_datas_point_user_point_name_shares_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiDatasPointUserPointNameSharesDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_datas_point_user_point_name_shares_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiDatasPointUserPointNameSharesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_datas_point_user_point_name_shares_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiDatasPointUserPointNameSharesPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_datas_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiDatasPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`browse_files_for_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BrowseFilesForDataError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_one_file_for_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteOneFileForDataError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dump_one_file_for_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DumpOneFileForDataError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_all_jobs_for_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllJobsForDataError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_one_file_for_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateOneFileForDataError {
    UnknownValue(serde_json::Value),
}

pub async fn api_datas_get(
    configuration: &configuration::Configuration,
) -> Result<Vec<models::DataPointDto>, Error<ApiDatasGetError>> {
    let uri_str = format!("{}/api/datas", configuration.base_path);
    ApiBuilder::new(configuration, reqwest::Method::GET, &uri_str)
        .execute()
        .await
}

pub async fn api_datas_point_user_point_name_delete(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
) -> Result<bool, Error<ApiDatasPointUserPointNameDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_point_user = point_user;
    let p_point_name = point_name;

    let uri_str = format!(
        "{}/api/datas/{pointUser}/{pointName}",
        configuration.base_path,
        pointUser = crate::apis::urlencode(p_point_user),
        pointName = crate::apis::urlencode(p_point_name)
    );
    ApiBuilder::new(configuration, reqwest::Method::DELETE, &uri_str)
        .execute()
        .await
}

pub async fn api_datas_point_user_point_name_get(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
) -> Result<models::DataPointDto, Error<ApiDatasPointUserPointNameGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_point_user = point_user;
    let p_point_name = point_name;

    let uri_str = format!(
        "{}/api/datas/{pointUser}/{pointName}",
        configuration.base_path,
        pointUser = crate::apis::urlencode(p_point_user),
        pointName = crate::apis::urlencode(p_point_name)
    );
    ApiBuilder::new(configuration, reqwest::Method::GET, &uri_str)
        .execute()
        .await
}

pub async fn api_datas_point_user_point_name_put(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
    max_bytes: Option<i64>,
) -> Result<models::DataPointDto, Error<ApiDatasPointUserPointNamePutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_point_user = point_user;
    let p_point_name = point_name;
    let p_max_bytes = max_bytes;

    let uri_str = format!(
        "{}/api/datas/{pointUser}/{pointName}",
        configuration.base_path,
        pointUser = crate::apis::urlencode(p_point_user),
        pointName = crate::apis::urlencode(p_point_name)
    );

    ApiBuilder::new(&configuration, reqwest::Method::PUT, &uri_str)
        .with_opt_query("maxBytes".into(), p_max_bytes)?
        .execute()
        .await
}
pub async fn api_datas_point_user_point_name_shares_delete(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
    user: Option<&str>,
) -> Result<bool, Error<ApiDatasPointUserPointNameSharesDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_point_user = point_user;
    let p_point_name = point_name;
    let p_user = user;

    let uri_str = format!(
        "{}/api/datas/{pointUser}/{pointName}/shares",
        configuration.base_path,
        pointUser = crate::apis::urlencode(p_point_user),
        pointName = crate::apis::urlencode(p_point_name)
    );

    ApiBuilder::new(&configuration, reqwest::Method::DELETE, &uri_str)
        .with_opt_query("user".into(), p_user)?
        .execute()
        .await
}

pub async fn api_datas_point_user_point_name_shares_get(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
    user: Option<&str>,
) -> Result<Vec<models::DataPointShareDto>, Error<ApiDatasPointUserPointNameSharesGetError>> {
    let uri_str = format!(
        "{}/api/datas/{}/{}//shares",
        configuration.base_path,
        crate::apis::urlencode(point_user),
        crate::apis::urlencode(point_name)
    );

    ApiBuilder::new(configuration, reqwest::Method::GET, &uri_str)
        .with_opt_query("user".into(), user)?
        .execute()
        .await
}

pub async fn api_datas_point_user_point_name_shares_put(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
    data_point_share_dto: Option<models::DataPointShareDto>,
) -> Result<models::DataPointShareDto, Error<ApiDatasPointUserPointNameSharesPutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_point_user = point_user;
    let p_point_name = point_name;
    let p_data_point_share_dto = data_point_share_dto;

    let uri_str = format!(
        "{}/api/datas/{pointUser}/{pointName}/shares",
        configuration.base_path,
        pointUser = crate::apis::urlencode(p_point_user),
        pointName = crate::apis::urlencode(p_point_name)
    );
    ApiBuilder::new(configuration, reqwest::Method::PUT, &uri_str)
        .with_body(p_data_point_share_dto)
        .execute()
        .await
}

pub async fn api_datas_post(
    configuration: &configuration::Configuration,
    name: Option<&str>,
    max_bytes: Option<i64>,
) -> Result<models::DataPointDto, Error<ApiDatasPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_name = name;
    let p_max_bytes = max_bytes;

    let uri_str = format!("{}/api/datas", configuration.base_path);
    ApiBuilder::new(configuration, reqwest::Method::POST, &uri_str)
        .with_opt_query("name".into(), p_name)?
        .with_opt_query("maxBytes".into(), p_max_bytes)?
        .execute()
        .await
}

pub async fn browse_files_for_data(
    configuration: &configuration::Configuration,
    data_point_browse_get_dto: Option<models::DataPointBrowseGetDto>,
) -> Result<Vec<models::FileDto>, Error<BrowseFilesForDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_data_point_browse_get_dto = data_point_browse_get_dto;

    let uri_str = format!("{}/api/datas/files", configuration.base_path);
    ApiBuilder::new(configuration, reqwest::Method::GET, &uri_str)
        .with_body(p_data_point_browse_get_dto)
        .execute()
        .await
}

pub async fn delete_one_file_for_data(
    configuration: &configuration::Configuration,
    body: Option<&str>,
) -> Result<bool, Error<DeleteOneFileForDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/api/datas/files", configuration.base_path);
    ApiBuilder::new(configuration, reqwest::Method::DELETE, &uri_str)
        .with_body(p_body)
        .execute()
        .await
}

pub async fn dump_one_file_for_data(
    configuration: &configuration::Configuration,
    body: Option<&str>,
) -> Result<models::FileOutputDto, Error<DumpOneFileForDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/api/datas/dump", configuration.base_path);
    ApiBuilder::new(configuration, reqwest::Method::GET, &uri_str)
        .with_body(p_body)
        .execute()
        .await
}

pub async fn get_all_jobs_for_data(
    configuration: &configuration::Configuration,
    point_user: &str,
    point_name: &str,
) -> Result<Vec<models::RepoDataJobDto>, Error<GetAllJobsForDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_point_user = point_user;
    let p_point_name = point_name;

    let uri_str = format!(
        "{}/api/datas/{pointUser}/{pointName}/jobs",
        configuration.base_path,
        pointUser = crate::apis::urlencode(p_point_user),
        pointName = crate::apis::urlencode(p_point_name)
    );
    ApiBuilder::new(configuration, reqwest::Method::GET, &uri_str)
        .execute()
        .await
}

pub async fn update_one_file_for_data(
    configuration: &configuration::Configuration,
    file_put_dto: Option<models::FilePutDto>,
) -> Result<bool, Error<UpdateOneFileForDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_file_put_dto = file_put_dto;

    let uri_str = format!("{}/api/datas/files", configuration.base_path);
    ApiBuilder::new(configuration, reqwest::Method::PUT, &uri_str)
        .with_body(p_file_put_dto)
        .execute()
        .await
}
