/*
 * Neptis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{Error, configuration};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize};
use serde_json::Value;

/// struct for typed errors of method [`delete_one_log`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteOneLogError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_all_logs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllLogsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_one_log`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOneLogError {
    UnknownValue(serde_json::Value),
}

pub async fn delete_one_log(
    configuration: &configuration::Configuration,
    id: i64,
) -> Result<bool, Error<DeleteOneLogError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;

    let uri_str = format!("{}/api/logs/{id}", configuration.base_path, id = p_id);
    configuration
        .execute(
            reqwest::Method::DELETE,
            &uri_str,
            None::<Value>,
            None::<Value>,
        )
        .await
}

pub async fn get_all_logs(
    configuration: &configuration::Configuration,
) -> Result<Vec<models::LogItemDto>, Error<GetAllLogsError>> {
    let uri_str = format!("{}/api/logs", configuration.base_path);
    configuration
        .execute(reqwest::Method::GET, &uri_str, None::<Value>, None::<Value>)
        .await
}

pub async fn get_one_log(
    configuration: &configuration::Configuration,
    id: i64,
) -> Result<models::LogItemDto, Error<GetOneLogError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;

    let uri_str = format!("{}/api/logs/{id}", configuration.base_path, id = p_id);
    configuration
        .execute(reqwest::Method::GET, &uri_str, None::<Value>, None::<Value>)
        .await
}
